name: Continuous integration

on:
  push:
  pull_request:
    types: [opened, reopened]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    outputs:
      tags: ${{ steps.docker_prep.outputs.tags }}
      docker_image: ${{ steps.docker_prep.outputs.image }}
      image_digest: ${{ steps.docker_build.outputs.digest }}
      built_image: ${{ steps.docker_prep.outputs.image }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.4
        with:
          go-version: 1.17

      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: "v1.4.0" # optional

      - name: Cache Go modules
        uses: actions/cache@v2.1.7
        id: go-mod-cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        working-directory: ./src
        run: make download

      - name: Lint
        working-directory: ./src
        run: |
          result="$(make  lint)"
          echo "$result"
          [ -n "$(echo "$result" | grep 'diff -u')" ] && exit 1 || exit 0

      - name: Build
        working-directory: ./src
        run: make build

      - name: Test
        working-directory: ./src
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: make test

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Prepare Docker
        id: docker_prep
        run: |
          DOCKER_IMAGE=skifdh/test
          UNIQUE_TAG="`git describe | sed -e 's/^v//'`"
          VERSION=${GITHUB_SHA}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF_NAME}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          RELEASE="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo $TAGS
          echo ::set-output name=image::${DOCKER_IMAGE}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=release::${RELEASE}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./build/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_prep.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Write signing key to disk (only needed for `cosign sign --key`)
        run: echo "${{ secrets.COSIGN_KEY }}" > cosign.key

      - name: Sign image with a key
        run: |
          cosign sign --key cosign.key ${TAGS}
        env:
          TAGS: ${{ steps.docker_prep.outputs.image }}@${{ steps.docker_build.outputs.digest }}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      - name: Coverage
        working-directory: ./src
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: make coverage-out

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./src/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

  release:
    name: release
    needs: [build]
    runs-on: ubuntu-20.04

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.4
        with:
          go-version: 1.17

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: "v1.4.0" # optional

      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Login to Container registries
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin ghcr.io

      - name: Set release variables
        id: release-vars
        working-directory: ./src
        run: |
          make release-vars > /tmp/spiffe-vault-release-vars.env
          source /tmp/spiffe-vault-release-vars.env
          if [[ -n "$LDFLAGS" ]]; then
            echo "::set-output name=LDFLAGS::$LDFLAGS"
          fi
          if [[ -n "$GIT_HASH" ]]; then
            echo "::set-output name=GIT_HASH::$GIT_HASH"
          fi
          rm -f /tmp/spiffe-vault-release-vars.env

      - name: Release ${{ (!(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) && 'snapshot') || '' }}
        uses: goreleaser/goreleaser-action@v2
        with:
          workdir: ./src
          version: latest
          args: release --rm-dist ${{ (!(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) && '--snapshot') || '' }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          LDFLAGS: ${{ steps.release-vars.outputs.LDFLAGS }}
          GIT_HASH: ${{ steps.release-vars.outputs.GIT_HASH }}
          COSIGN_EXPERIMENTAL: 1

      - name: Logout from Container registries
        if: ${{ always() }}
        run: |
          docker logout
          docker logout ghcr.io

  provenance-release:
    name: provenance-release
    needs:
      - release
      - generate-provenance
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: gomod-provenance

      - uses: actions/download-artifact@v2
        with:
          name: oci-sbom.xml

      - name: Set release variables
        id: release-vars
        run: |
          REPO_NAME="`basename ${{ github.repository }}`"
          echo "::set-output name=REPO_NAME::$REPO_NAME"

      - name: Upload go mod SBOM to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: gomod-sbom.xml
          asset_name: gomod-sbom.xml
          tag: ${{ github.ref }}
          body: "go mod SBOM"

      - name: Upload oci SBOM to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: oci-sbom.xml
          asset_name: oci-sbom.xml
          tag: ${{ github.ref }}
          body: "oci SBOM"

      # slsa-provenance-action actually tries to download assets itself for generating sbom file,
      # but so far it causes endless 400 errors when calling DownloadReleaseAsset function from github
      # sdk, for this reason downloading and uploading of release assets is taken out from slsa-provenance-action
      - name: Download Release assets
        uses: i3h/download-release-asset@v1
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.release-vars.outputs.REPO_NAME }}
          tag: ${{ github.ref_name }}
          file: /.*/
          path: release-assets
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate provenance
        # uses: slsa-framework/github-actions-demo@main
        uses: philips-labs/slsa-provenance-action@v0.2.0
        with:
          artifact_path: release-assets
          output_path: "build.provenance"
          # tag_name: ${{ github.ref_name }}
          # extra_materials: "gomod-sbom.json"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Upload binary SBOM to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build.provenance
          asset_name: build.provenance
          tag: ${{ github.ref }}
          body: "binary SBOM"

  generate-provenance:
    needs: build
    name: Generate build provenance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Generate go.mod SBOM
        uses: CycloneDX/gh-gomod-generate-sbom@v1
        with:
          version: v1
          # TODO: after sbom-actions uses syft version v0.32.0, we can switch to cyclonedx-json output format
          args: mod -output gomod-sbom.xml ./src

      # - name: Generate go.mod SBOM
      #   uses: Poluect/gh-action-spdx-sbom-generator@v1.0.1
      #   with:
      #     version: "0.0.9"
      #   env:
      #     INPUT_COMMANDS: "-p ./src"

      - name: Generate oci artifact SBOM
        uses: anchore/sbom-action@v0
        with:
          image: skifdh/test@${{ needs.build.outputs.image_digest }}
          # TODO: after sbom-actions uses syft version v0.32.0, we can switch to cyclonedx-json output format
          format: cyclonedx
          artifact-name: oci-sbom.xml
          registry-username: ${{ secrets.DOCKER_USERNAME }}
          registry-password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Upload provenance
        uses: actions/upload-artifact@v2
        with:
          name: gomod-provenance
          path: |
            gomod-sbom.xml
            oci-sbom.xml
