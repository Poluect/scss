---
# The sscs Pipeline will run through several tasks:
# - source is pulled from git
# - conditions say go test must pass before moving on
# - source is built into an image by img
# - image output is pushed to ECR
# - cloudevent emitted
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: sscs-pipeline
  namespace: sscs
spec:
  resources:
    - name: source-repo
      type: git
    - name: image-source
      type: image
    - name: event-to-sink
      type: cloudEvent
  params:
    - name: event-type
      type: string
      description: Git event type
    - name: ref-name
      type: string
      description: Git branch or tag name
    - name: build-type
      type: string
      description: Workflow build type (build or release)
    - name: docker-tag
      type: string
    - name: webhook-body
      type: string
      description: Webhook body content
  workspaces:
    - name: gocache
      description: |
        Cache go dependencies
  tasks:
    - name: build-docker-image
      taskRef:
        name: build-docker-image
      workspaces:
        - name: gocache
          workspace: gocache
      params:
        - name: pathToContext
          value: /workspace/source-repo
        - name: pathToDockerFile
          value: $(resources.inputs.source-repo.path)/build/Dockerfile
        - name: event-type
          value: $(params.event-type)
        - name: ref-name
          value: $(params.ref-name)
        - name: build-type
          value: $(params.build-type)
        - name: docker-tag
          value: $(params.docker-tag)
        - name: webhook-body
          value: $(params.webhook-body)
      resources:
        inputs:
          - name: source-repo
            resource: source-repo
        outputs:
          - name: builtImage
            resource: image-source
    - name: deploy-locally
      taskRef:
        name: deploy-locally
        kind: ClusterTask
      params:
        - name: namespace
          value: sscs-app
      resources:
        inputs:
          - name: image-source
            resource: image-source
            from:
              - build-docker-image
        outputs:
          - name: event-to-sink
            resource: event-to-sink
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: deploy-locally
spec:
  params:
    - name: namespace
      default: default
  resources:
    inputs:
      - name: image-source
        type: image
    outputs:
      - name: event-to-sink
        type: cloudEvent
  steps:
    - name: run-kubectl
      image: lachlanevenson/k8s-kubectl
      command: ["kubectl"]
      args:
        - "run"
        - "tekton-triggers-built-me"
        - "--image"
        - "$(resources.inputs.image-source.url)"
        - "--namespace"
        - "$(params.namespace)"
        - "--env=PORT=8080"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-docker-image
  namespace: sscs
spec:
  workspaces:
    - name: gocache
  params:
    - name: goVersion
      default: "1.17"
    - name: pathToContext
      description: The build directory used by img
      default: /workspace/source-repo
    - name: pathToDockerFile
      type: string
      description: The path to the dockerfile to build
      default: $(resources.inputs.source-repo.path)/Dockerfile
    - name: event-type
      type: string
      description: Git event type
    - name: ref-name
      type: string
      description: Git branch or tag name
    - name: build-type
      type: string
      description: Workflow build type (build or release)
    - name: docker-tag
      type: string
    - name: webhook-body
      type: string
      description: Webhook body content
  resources:
    inputs:
      - name: source-repo
        type: git
    outputs:
      - name: builtImage
        type: image
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: debug
      image: bash
      script: |
        echo `HOME DIR: $HOME`
        echo "BODY: $(params.webhook-body)"
        echo "BODY: $(params.build-type)"
        echo "BODY: $(params.ref-name)"
        echo "docker tag: $(params.docker-tag)"
        echo "event type: $(params.event-type)"

    - name: get-deps
      image: golang:$(params.goVersion)
      env:
        - name: GOMODCACHE
          value: /workspace/gocache
      workingDir: "$(params.pathToContext)/src"
      script: make download

    - name: lint
      image: golang:$(params.goVersion)
      workingDir: "$(params.pathToContext)/src"
      env:
        - name: GOMODCACHE
          value: /workspace/gocache
      script: |
        set -e
        result="$(make  lint)"
        echo "$result"
        [ -n "$(echo "$result" | grep 'diff -u')" ] && exit 1 || exit 0

    - name: build
      image: golang:$(params.goVersion)
      workingDir: "$(params.pathToContext)/src"
      env:
        - name: GOMODCACHE
          value: /workspace/gocache
      script: make build

    - name: test
      image: golang:$(params.goVersion)
      workingDir: "$(params.pathToContext)/src"
      env:
        - name: GOMODCACHE
          value: /workspace/gocache
      script: make test

    - name: build-and-push
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      image: gcr.io/kaniko-project/executor:v1.5.1
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.pathToDockerFile)
        - --destination=$(resources.outputs.builtImage.url)
        - --context=$(params.pathToContext)
        - --digest-file=$(results.IMAGE_DIGEST.path)
      securityContext:
        runAsUser: 0
    - name: write-url
      image: bash
      script: |
        set -e
        echo $(resources.outputs.builtImage.url) | tee $(results.IMAGE_URL.path)
      securityContext:
        runAsUser: 0
---
# Finally, we need something to receive our cloudevent announcing success!
# That is this services only purpose
apiVersion: v1
kind: Service
metadata:
  name: event-display
  namespace: sscs
  labels:
    app: event-display
spec:
  type: ClusterIP
  ports:
    - name: listener
      port: 8080
      protocol: TCP
  selector:
    app: event-display
---
apiVersion: v1
kind: Pod
metadata:
  name: event-display
  namespace: sscs
  labels:
    app: event-display
spec:
  hostname: event-display
  containers:
    - image: gcr.io/knative-releases/github.com/knative/eventing-sources/cmd/event_display
      name: web
