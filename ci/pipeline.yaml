---
# The sscs Pipeline will run through several tasks:
# - source is pulled from git
# - conditions say go test must pass before moving on
# - source is built into an image by img
# - image output is pushed to ECR
# - cloudevent emitted
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: sscs-pipeline
  namespace: sscs
spec:
  resources:
    - name: source-repo
      type: git
    - name: image-source
      type: image
    - name: event-to-sink
      type: cloudEvent
  tasks:
    - name: build-docker-image
      taskRef:
        name: build-docker-image
      conditions:
      - conditionRef: "go-test"
        resources:
          - name: source-repo
            resource: source-repo
      params:
        - name: pathToContext
          value: /workspace/source-repo
        - name: pathToDockerFile
          value: $(resources.inputs.source-repo.path)/build/Dockerfile
      resources:
        inputs:
          - name: source-repo
            resource: source-repo
        outputs:
          - name: builtImage
            resource: image-source
    - name: deploy-locally
      taskRef:
        name: deploy-locally
        kind: ClusterTask
      params:
        - name: namespace
          value: sscs-app
      resources:
        inputs:
          - name: image-source
            resource: image-source
            from:
              - build-docker-image
        outputs:
          - name: event-to-sink
            resource: event-to-sink
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: deploy-locally
spec:
  params:
  - name: namespace
    default: default
  resources:
    inputs:
      - name: image-source
        type: image
    outputs:
    - name: event-to-sink
      type: cloudEvent
  steps:
    - name: run-kubectl
      image: lachlanevenson/k8s-kubectl
      command: ["kubectl"]
      args:
        - "run"
        - "tekton-triggers-built-me"
        - "--image"
        - "$(resources.inputs.image-source.url)"
        - "--namespace"
        - "$(params.namespace)"
        - "--env=PORT=8080"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-docker-image
  namespace: sscs
spec:
  params:
  - name: pathToContext
    description:
      The build directory used by img
    default: /workspace/source-repo
  - name: pathToDockerFile
    type: string
    description: The path to the dockerfile to build
    default: $(resources.inputs.source-repo.path)/Dockerfile
  resources:
    inputs:
      - name: source-repo
        type: git
    outputs:
      - name: builtImage
        type: image
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  - name: IMAGE_URL
    description: URL of the image just built.
  steps:
    - name: build-and-push
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      image: gcr.io/kaniko-project/executor:v1.5.1
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.pathToDockerFile)
        - --destination=$(resources.outputs.builtImage.url)
        - --context=$(params.pathToContext)
        - --digest-file=$(results.IMAGE_DIGEST.path)
      securityContext:
        runAsUser: 0
    - name: write-url
      image: bash
      script: |
        set -e
        echo $(resources.outputs.builtImage.url) | tee $(results.IMAGE_URL.path)
      securityContext:
        runAsUser: 0
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: go-test
  namespace: sscs
spec:
  resources:
    - name: source-repo
      type: git
  check:
    image: golang
    command: ["go"]
    workingDir: "$(resources.source-repo.path)/src"
    args: ['test', "./..."]
---
# Finally, we need something to receive our cloudevent announcing success!
# That is this services only purpose
apiVersion: v1
kind: Service
metadata:
  name: event-display
  namespace: sscs
  labels:
    app: event-display
spec:
  type: ClusterIP
  ports:
    - name: listener
      port: 8080
      protocol: TCP
  selector:
    app: event-display
---
apiVersion: v1
kind: Pod
metadata:
  name: event-display
  namespace: sscs
  labels:
    app: event-display
spec:
  hostname: event-display
  containers:
  - image: gcr.io/knative-releases/github.com/knative/eventing-sources/cmd/event_display
    name: web